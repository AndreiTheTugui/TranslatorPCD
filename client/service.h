<<<<<<< Updated upstream
#import "stlvector.h"
#import "stlstring.h"

int ns__upload(struct soap *soap, char *fileName, char *fileContent, char **response);
int ns__download(struct soap *soap, char *fileName, char **fileContent);
=======
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* service.h
   Generated by wsdl2h 2.8.91 from service.wsdl and typemap.dat
   2024-06-11 21:33:56 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on service.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://example.com/translator                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://example.com/translator"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://example.com/translator"
//gsoap ns1   schema namespace:	http://example.com/translator
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://example.com/translator                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://example.com/translator                                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://example.com/translator":translateFile
/// @brief "http://example.com/translator":translateFile is a complexType.
///
/// @note struct _ns1__translateFile operations:
/// - _ns1__translateFile* soap_new__ns1__translateFile(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__ns1__translateFile(struct soap*, _ns1__translateFile*) default initialize members
/// - int soap_read__ns1__translateFile(struct soap*, _ns1__translateFile*) deserialize from a source
/// - int soap_write__ns1__translateFile(struct soap*, _ns1__translateFile*) serialize to a sink
/// - _ns1__translateFile* soap_dup__ns1__translateFile(struct soap*, _ns1__translateFile* dst, _ns1__translateFile *src) returns deep copy of _ns1__translateFile src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns1__translateFile(_ns1__translateFile*) deep deletes _ns1__translateFile data members, use only on dst after soap_dup__ns1__translateFile(NULL, _ns1__translateFile *dst, _ns1__translateFile *src) (use soapcpp2 -Ed)
struct _ns1__translateFile
{
/// Element "fileContent" of type xs:string.
    char*                                fileContent                    1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://example.com/translator                                            *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://example.com/translator":translatedContent of type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://example.com/translator                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	TranslatorBinding 
//gsoap ns1  service type:	TranslatorPortType 
//gsoap ns1  service port:	http://example.com/translator/service 
//gsoap ns1  service namespace:	http://example.com/translator 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref TranslatorBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page TranslatorBinding Binding "TranslatorBinding"

@section TranslatorBinding_operations Operations of Binding "TranslatorBinding"

  - @ref __ns1__translateFile

@section TranslatorBinding_ports Default endpoints of Binding "TranslatorBinding"

  - http://example.com/translator/service

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   TranslatorBinding                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__translateFile                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__translateFile" of service binding "TranslatorBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://example.com/translator/service

  - Default SOAP action or REST location path:
    - "http://example.com/translator/translateFile"

  - Addressing input action: "http://example.com/translator/translateFile"

  - Addressing output action: "http://example.com/translator/translateFileResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__translateFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__translateFile*         ns1__translateFile,
    // output parameters:
    char*                              *ns1__translatedContent
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__translateFile(
    struct soap *soap,
    // input parameters:
    struct _ns1__translateFile*         ns1__translateFile,
    // output parameters:
    char*                              *ns1__translatedContent
  );
@endcode

*/

//gsoap ns1  service method-protocol:	translateFile SOAP
//gsoap ns1  service method-style:	translateFile document
//gsoap ns1  service method-encoding:	translateFile literal
//gsoap ns1  service method-input-action:	translateFile http://example.com/translator/translateFile
//gsoap ns1  service method-output-action:	translateFile http://example.com/translator/translateFileResponse
int __ns1__translateFile(
    struct _ns1__translateFile*         ns1__translateFile,	///< Input parameter
    char*                              *ns1__translatedContent	///< Output parameter
);

/** @page TranslatorBinding Binding "TranslatorBinding"

@section TranslatorBinding_policy_enablers Policy Enablers of Binding "TranslatorBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://example.com/translator"

  - <ns1:translateFile> @ref _ns1__translateFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__translateFile(struct soap*, struct _ns1__translateFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__translateFile(struct soap*, struct _ns1__translateFile*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__translateFile(struct soap*, const char *URL, struct _ns1__translateFile*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__translateFile(struct soap*, const char *URL, struct _ns1__translateFile*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__translateFile(struct soap*, const char *URL, struct _ns1__translateFile*);
    soap_POST_recv__ns1__translateFile(struct soap*, struct _ns1__translateFile*);
    @endcode

  - <ns1:translatedContent> (use wsdl2h option -g to auto-generate type _ns1__translatedContent)

*/

/* End of service.h */
>>>>>>> Stashed changes
